Pengenalan OpenAPI
OpenAPI merupakan standar spesifikasi, tidak tergantung bahasa pemrograman apapun, untuk membuat dokumentasi RESTful API.
OpenAPI dibuat agar pengguna RESTful API tidak perlu mengakses kode aplikasi dan membaca dokumen manual (misal dalam bentuk doc, pdf) untuk memahami RESTful API yang dibuat
OpenAPI bisa menggunakan tool untuk menampilkan secara visual, bahkan untuk membuat kode program client atau server
https://www.openapis.org/ 
https://github.com/OAI/OpenAPI-Specification 
https://swagger.io/specification/ 

Document Structure
OpenAPI memiliki struktur document yang sudah standar
Namun kita diberi dua opsi untuk membuat document nya, bisa menggunakan JSON atau YAML
https://www.json.org/ 
https://yaml.org/ 

OpenAPI Editor
Document OpenAPI hanya menggunakan JSON atau Yaml, jadi untuk membuat document OpenAPI kita cukup menggunakan Text Editor
Namun jika kita ingin melihat OpenAPI dalam bentuk visual, kita juga bisa menggunakan Swagger Editor : https://editor.swagger.io/ 
Jika menggunakan product JetBrains, bisa menggunakan plugin OpenAPI https://www.jetbrains.com/help/idea/openapi.html 
Jika menggunakan Visual Studio Code, bisa menggunakan plugin OpenAPI https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi 

Tipe Data
Saat kita membuat RESTful API, sudah dipastikan kita akan membuat request dan response, dimana dalam data request dan response sudah dipastikan terdapat detail data
Misal jika terdapat data Product, pasti ada id, name, price, dan lain-lain
Semua detail data tersebut pasti memiliki tipe data
Kita tidak bisa menggunakan tipe data yang terdapat pada bahasa pemrograman yang digunakan untuk membuat RESTful API, oleh karena itu pada OpenAPI terdapat tipe data general yang bisa digunakan yang dapat dimengerti di semua bahasa pemrograman

OpenAPI Tipe Data (1)

OpenAPI Tipe Data (2)

Document
OpenAPI sangatlah sederhana, kita hanya perlu membuat satu file berisi semua data OpenAPI nya
OpenAPI memiliki struktur yang sudah ditentukan ketika membuat document nya
Kita bisa menggunakan JSON atau YAML untuk file nya
https://spec.openapis.org/oas/v3.0.3#openapi-object 

OpenAPI Object (1)

OpenAPI Object (2)

Kode : OpenAPI Document
{
  "openapi": "3.0.3",
  "info": {
    "title": "Todolist RESTful API",
    "version": "1",
    "description": "OpenAPI for Todolist RESTful API",
    "termsOfService": "https://www.programmerzamannow.com",
    "contact": {
      "name": "Eko Kurniawan Khannedy",
      "email": "echo.khannedy@gmail.com",
      "url": "https://www.programmerzamannow.com"
    },
    "license": {
      "name": "APACHE 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "servers": [
    {
      "description": "Todolist RESTful API Server",
      "url": "https://{environment}.programmerzamannow.com/api/v1",
      "variables": {
        "environment": {
          "description": "Server Environment",
          "default": "dev",
          "enum": [
            "dev",
            "qa",
            "prod"
          ]
        }
      }
    }
  ],
  "externalDocs": {
    "description": "Youtube Programmer Zaman Now",
    "url": "https://www.youtube.com/c/ProgrammerZamanNow"
  },
  "paths": {
    "/todolist": {
      "get": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Get all todolist",
        "description": "Get all active todolist by default",
        "parameters": [
          {
            "name": "include_done",
            "in": "query",
            "required": false,
            "description": "Is include done todolist",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Filter todolist by name",
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "maxLength": 100
            },
            "examples": {
              "java": {
                "description": "Example name Java",
                "value": "Java"
              },
              "php": {
                "description": "Example name PHP",
                "value": "PHP"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success get all todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayTodolist"
                },
                "examples": {
                  "success": {
                    "description": "Example success get all todolist",
                    "value": [
                      {
                        "id": "1",
                        "name": "Java",
                        "priority": 3,
                        "tags": [
                          "Java",
                          "Programming"
                        ]
                      },
                      {
                        "id": "2",
                        "name": "PHP",
                        "priority": 5,
                        "tags": [
                          "PHP",
                          "Programming"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Create new todolist",
        "description": "Create new todolist to database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateTodolist"
              },
              "examples": {
                "java": {
                  "description": "Example create todolist Java",
                  "value": {
                    "name": "Java",
                    "priority": 3,
                    "tags": [
                      "Java",
                      "Programming"
                    ]
                  }
                },
                "php": {
                  "description": "Example create todolist PHP",
                  "value": {
                    "name": "PHP",
                    "priority": 5,
                    "tags": [
                      "PHP",
                      "Programming"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success create todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todolist"
                },
                "examples": {
                  "java": {
                    "description": "Success create java todolist",
                    "value": {
                      "id": "1",
                      "name": "Java",
                      "priority": 3,
                      "tags": [
                        "Java",
                        "Programming"
                      ]
                    }
                  },
                  "php": {
                    "description": "Success create php todolist",
                    "value": {
                      "id": "2",
                      "name": "PHP",
                      "priority": 5,
                      "tags": [
                        "PHP",
                        "Programming"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/todolist/{todolistId}": {
      "put": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Update existing todolist",
        "description": "Update existing todolist in database",
        "parameters": [
          {
            "$ref": "#/components/parameters/TodolistId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateTodolist"
              },
              "examples": {
                "java": {
                  "description": "Example create todolist Java",
                  "value": {
                    "name": "Java",
                    "priority": 3,
                    "tags": [
                      "Java",
                      "Programming"
                    ]
                  }
                },
                "php": {
                  "description": "Example create todolist PHP",
                  "value": {
                    "name": "PHP",
                    "priority": 5,
                    "tags": [
                      "PHP",
                      "Programming"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success update todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todolist"
                },
                "examples": {
                  "java": {
                    "description": "Success create java todolist",
                    "value": {
                      "id": "1",
                      "name": "Java",
                      "priority": 3,
                      "tags": [
                        "Java",
                        "Programming"
                      ]
                    }
                  },
                  "php": {
                    "description": "Success create php todolist",
                    "value": {
                      "id": "2",
                      "name": "PHP",
                      "priority": 5,
                      "tags": [
                        "PHP",
                        "Programming"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Delete existing todolist",
        "description": "Delete existing todolist in database",
        "parameters": [
          {
            "$ref": "#/components/parameters/TodolistId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success delete todolist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "Success delete todolist",
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed delete not found todolist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "examples": {
                  "failed": {
                    "description": "Failed delete todolist",
                    "value": {
                      "success": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "TodolistAuth": {
        "description": "Authentication for Todolist RESTful API",
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    },
    "parameters": {
      "TodolistId": {
        "name": "todolistId",
        "in": "path",
        "required": true,
        "description": "Todolist id for updated",
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "examples": {
          "java": {
            "description": "Sample todolist id for Java",
            "value": "1"
          },
          "php": {
            "description": "Sample todolist id for PHP",
            "value": "2"
          }
        }
      }
    },
    "schemas": {
      "Todolist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateOrUpdateTodolist": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ArrayTodolist": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Todolist"
        }
      }
    }
  }
}

{
    "openapi" : "3.0.3",
    "info" : {},
    "servers" : [],
    "paths" : {}
}

Info
Info merupakan bagian dari informasi metadata tentang API yang kita buat
Kita bisa memasukkan author, lisensi, dan lain-lain

Info Object

Contact Object

License Object

Kode : Info
"info": {
    "title": "Todolist RESTful API",
    "version": "1",
    "description": "OpenAPI for Todolist RESTful API",
    "termsOfService": "https://www.programmerzamannow.com",
    "contact": {
      "name": "Eko Kurniawan Khannedy",
      "email": "echo.khannedy@gmail.com",
      "url": "https://www.programmerzamannow.com"
    },
    "license": {
      "name": "APACHE 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },

Server
Saat kita membuat API sudah pasti terdapat server RESTful API yang nanti akan kita buat
Kita bisa memberitahu server yang tersedia di OpenAPI
Misal, terdapat server development, staging, production dan lain-lain

Server Object

Kode : Server
  "servers": [
    {
      "description": "Todolist RESTful API Server",
      "url": "https://{environment}.programmerzamannow.com/api/v1",
      "variables": {
        "environment": {
          "description": "Server Environment",
          "default": "dev",
          "enum": [
            "dev",
            "qa",
            "prod"
          ]
        }
      }
    }
  ],

External Documentation
External documentation merupakan bagian dalam OpenAPI jika kita ingin menambahkan link tambahan dalam OpenAPI
Bisa menuju link documentation lain, atau mungkin link menuju website

External Documentation Object

Kode : External Documentation
  "externalDocs": {
    "description": "Youtube Programmer Zaman Now",
    "url": "https://www.youtube.com/c/ProgrammerZamanNow"
  },

Path
Path merupakan representasi endpoint API di OpenAPI
Pada Path, kita tidak perlu menuliskan seluruh URL, cukup url di belakang setelah lokasi server

Path Object

Path Item Object (1)

Path Item Object (2)

Path Operation

Kode : Path
"paths": {
    "/todolist": {
      "get": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Get all todolist",
        "description": "Get all active todolist by default",
        "parameters": [
          {
            "name": "include_done",
            "in": "query",
            "required": false,
            "description": "Is include done todolist",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Filter todolist by name",
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "maxLength": 100
            },
            "examples": {
              "java": {
                "description": "Example name Java",
                "value": "Java"
              },
              "php": {
                "description": "Example name PHP",
                "value": "PHP"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success get all todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayTodolist"
                },
                "examples": {
                  "success": {
                    "description": "Example success get all todolist",
                    "value": [
                      {
                        "id": "1",
                        "name": "Java",
                        "priority": 3,
                        "tags": [
                          "Java",
                          "Programming"
                        ]
                      },
                      {
                        "id": "2",
                        "name": "PHP",
                        "priority": 5,
                        "tags": [
                          "PHP",
                          "Programming"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Create new todolist",
        "description": "Create new todolist to database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateTodolist"
              },
              "examples": {
                "java": {
                  "description": "Example create todolist Java",
                  "value": {
                    "name": "Java",
                    "priority": 3,
                    "tags": [
                      "Java",
                      "Programming"
                    ]
                  }
                },
                "php": {
                  "description": "Example create todolist PHP",
                  "value": {
                    "name": "PHP",
                    "priority": 5,
                    "tags": [
                      "PHP",
                      "Programming"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success create todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todolist"
                },
                "examples": {
                  "java": {
                    "description": "Success create java todolist",
                    "value": {
                      "id": "1",
                      "name": "Java",
                      "priority": 3,
                      "tags": [
                        "Java",
                        "Programming"
                      ]
                    }
                  },
                  "php": {
                    "description": "Success create php todolist",
                    "value": {
                      "id": "2",
                      "name": "PHP",
                      "priority": 5,
                      "tags": [
                        "PHP",
                        "Programming"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

Operation
Setiap Path yang kita buat di OpenAPI, bisa memiliki lebih dari satu Operation
Hal ini dikarenakan, dalam HTTP, satu URL bisa memiliki beberapa HTTP Method
Misal url untuk mengambil semua data dan membuat data baru, mungkin url nya sama, yang membedakan adalah HTTP Method nya, GET untuk mengambil data, POST untuk membuat data
Inti dari API Documentation adalah dokumentasi operation yang terdapat pada RESTful API yang kita buat

Operation Object (1)

Operation Object (2)

Operation Object (3)

Kode : Operation
"paths": {
    "/todolist": {
      "get": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Get all todolist",
        "description": "Get all active todolist by default",
        "parameters": [
          {
            "name": "include_done",
            "in": "query",
            "required": false,
            "description": "Is include done todolist",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Filter todolist by name",
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "maxLength": 100
            },
            "examples": {
              "java": {
                "description": "Example name Java",
                "value": "Java"
              },
              "php": {
                "description": "Example name PHP",
                "value": "PHP"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success get all todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayTodolist"
                },
                "examples": {
                  "success": {
                    "description": "Example success get all todolist",
                    "value": [
                      {
                        "id": "1",
                        "name": "Java",
                        "priority": 3,
                        "tags": [
                          "Java",
                          "Programming"
                        ]
                      },
                      {
                        "id": "2",
                        "name": "PHP",
                        "priority": 5,
                        "tags": [
                          "PHP",
                          "Programming"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Create new todolist",
        "description": "Create new todolist to database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateTodolist"
              },
              "examples": {
                "java": {
                  "description": "Example create todolist Java",
                  "value": {
                    "name": "Java",
                    "priority": 3,
                    "tags": [
                      "Java",
                      "Programming"
                    ]
                  }
                },
                "php": {
                  "description": "Example create todolist PHP",
                  "value": {
                    "name": "PHP",
                    "priority": 5,
                    "tags": [
                      "PHP",
                      "Programming"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success create todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todolist"
                },
                "examples": {
                  "java": {
                    "description": "Success create java todolist",
                    "value": {
                      "id": "1",
                      "name": "Java",
                      "priority": 3,
                      "tags": [
                        "Java",
                        "Programming"
                      ]
                    }
                  },
                  "php": {
                    "description": "Success create php todolist",
                    "value": {
                      "id": "2",
                      "name": "PHP",
                      "priority": 5,
                      "tags": [
                        "PHP",
                        "Programming"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

Parameter
Parameter adalah data yang dikirim tidak melalui Request Body
Operation bisa memiliki parameter lebih dari satu
OpenAPI mendukung beberapa jenis parameter, yaitu Query Parameter, Path Variable, Header, dan Cookie
Kita bisa menambahkan parameter pada Operation, sehingga pengguna bisa tahu bahwa ada parameter yang perlu dikirim ketika memanggil Operation tersebut

Parameter Object (1)

Parameter Object (2)

Kode : Parameter (1)
      "get": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Get all todolist",
        "description": "Get all active todolist by default",
        "parameters": [
          {
            "name": "include_done",
            "in": "query",
            "required": false,
            "description": "Is include done todolist",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Filter todolist by name",
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "maxLength": 100
            },
            "examples": {
              "java": {
                "description": "Example name Java",
                "value": "Java"
              },
              "php": {
                "description": "Example name PHP",
                "value": "PHP"
              }
            }
          }
        ],

Kode : Parameter (2)
      "delete": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Delete existing todolist",
        "description": "Delete existing todolist in database",
        "parameters": [
          {
            "$ref": "#/components/parameters/TodolistId"
          }
        ],

Schema
Saat kita membuat parameter, kita mungkin ingin memberitahu tentang tipe data untuk parameter tersebut
Parameter memiliki attribute bernama schema, dimana schema sebenarnya sangat kompleks, kita akan bahas secara bertahap
Dimulai dari simple schema, misal tipe data yang sebelumnya sudah kita bahas

JSON Schema Specification
Schema menggunakan JSON Schema untuk mendefinisikan struktur datanya
JSON Schema bisa berisikan tipe sederhana, seperti number, string, boolean dan lain-lain, atau bahkan tipe data kompleks, seperti object dan array (yang akan kita bahas nanti)
https://json-schema.org/ 
https://json-schema.org/draft/2020-12/json-schema-core.html 

Kode : Schema
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },

JSON Schema Validation
Schema mendukung JSON Schema Validation
Hal ini membuat kita bisa memberitahu validasi yang diperlukan ketika pengguna membaca OpenAPI kita
Dengan kita tambahkan Schema Validation, pengguna RESTful API kita bisa tahu validation yang kita buat tanpa harus kita buat dokumentasi secara terpisah
https://json-schema.org/draft/2020-12/json-schema-validation.html 

Kode : Schema Validation
          {
            "name": "include_done",
            "in": "query",
            "required": false,
            "description": "Is include done todolist",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },

Request Body
OpenAPI juga mendukung dokumentasi untuk request body
Dengan ini, kita memberi tahu tentang schema request body yang harus dikirim ketika menggunakan RESTful API kita
Request body mendukung schema, sehingga kita memberi tahu bentuk schema format data, bahkan validasi yang diperlukan

Request Body Object

Media Type Object

Kode : Request Body

Object Schema
Sebelumnya kita hanya membuat schema sederhana, seperti schema tipe data boolean atau string
Spesifikasi di JSON Schema juga mendukung pembuatan schema berupa objek, yaitu data yang memiliki attribute lebih dari satu

Kode : Object Schema
"schemas": {
      "Todolist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },

Array Schema
Selain tipe data object, Schema juga mendukung tipe data array
Saat membuat tipe data array, kita juga bisa menentukan tipe data items yang terdapat di array, bisa tipe data sederhana, bisa tipe data kompleks seperti object atau array lagi

Kode : Array Schema
"schemas": {
      "Todolist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },

Example
OpenAPI mendukung example data
Example data merupakan data contoh yang bisa kita tambahkan baik itu di Parameter, Request Body dan Response Body

Kode : Example di Parameter
"parameters": [
          {
            "name": "include_done",
            "in": "query",
            "required": false,
            "description": "Is include done todolist",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Filter todolist by name",
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "maxLength": 100
            },
            "examples": {
              "java": {
                "description": "Example name Java",
                "value": "Java"
              },
              "php": {
                "description": "Example name PHP",
                "value": "PHP"
              }
            }
          }
        ],



Kode : Example di Request Body
                  "java": {
                    "description": "Success create java todolist",
                    "value": {
                      "id": "1",
                      "name": "Java",
                      "priority": 3,
                      "tags": [
                        "Java",
                        "Programming"
                      ]
                    }
                  },
                  "php": {
                    "description": "Success create php todolist",
                    "value": {
                      "id": "2",
                      "name": "PHP",
                      "priority": 5,
                      "tags": [
                        "PHP",
                        "Programming"
                      ]
                    }
                  }
                }

Response Body
Selain Request Body, kita juga mendokumentasikan Response Body di OpenAPI
Dengan demikian, kita bisa memberi tahu format Response Body yang kita kembalikan pada RESTful API yang kita buat
Yang menarik di OpenAPI, kita bisa memberi tahu format response body sesuai dengan response status nya, misal kita bisa tentukan untuk response status 200, 400, 500, dan lain-lain

Response Body Object

Response Object

Kode : Response Body

        "responses": {
          "200": {
            "description": "Success get all todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayTodolist"
                },
                "examples": {
                  "success": {
                    "description": "Example success get all todolist",
                    "value": [
                      {
                        "id": "1",
                        "name": "Java",
                        "priority": 3,
                        "tags": [
                          "Java",
                          "Programming"
                        ]
                      },
                      {
                        "id": "2",
                        "name": "PHP",
                        "priority": 5,
                        "tags": [
                          "PHP",
                          "Programming"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }

Tag
Tag merupakan fitur tambahan, dimana kita bisa grouping beberapa Path menjadi satu Tag yang sama
Misal ketika kita membuat OpenAPI untuk RESTful API Toko Online, kita grouping dengan Tag Product, Customer, Payment, Order, dan lain-lain

Kode : Tag
"paths": {
    "/todolist": {
      "get": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],
        "summary": "Get all todolist",
        "description": "Get all active todolist by default",
        "parameters": [
          {
            "name": "include_done",
            "in": "query",
            "required": false,
            "description": "Is include done todolist",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },

Component
Component merupakan bagian dalam OpenAPI untuk menyimpan object yang bisa digunakan ulang
Misal, saat nanti kita membuat spek untuk Request Body atau Response Body, dibanding kita buat satu persatu, jika ada beberapa yang sama, lebih baik kita buat dalam Component, sehingga bisa digunakan di beberapa Endpoint API
Ada banyak jenis component, ada schema, request, response, parameter, header, dan lain-lain

Component Object (1)

Component Object (2)

Kode : Component

  "components": {
    "securitySchemes": {
      "TodolistAuth": {
        "description": "Authentication for Todolist RESTful API",
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    },
    "parameters": {
      "TodolistId": {
        "name": "todolistId",
        "in": "path",
        "required": true,
        "description": "Todolist id for updated",
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "examples": {
          "java": {
            "description": "Sample todolist id for Java",
            "value": "1"
          },
          "php": {
            "description": "Sample todolist id for PHP",
            "value": "2"
          }
        }
      }
    },

Reference 
OpenAPI memiliki fitur reference, dimana dengan reference kita bisa membuat reference ke data component yang sudah kita buat
Hal ini lebih baik, daripada kita buat component yang sama berkali kali pada beberapa path, misal jika terdapat response body yang sama, lebih baik kita gunakan reference, jika memiliki parameter yang sama, lebih baik kita gunakan reference

Kode : Reference pada Parameter
summary": "Delete existing todolist",
        "description": "Delete existing todolist in database",
        "parameters": [
          {
            "$ref": "#/components/parameters/TodolistId"
          }
        ],

Kode : Reference pada Response Body
"responses": {
          "200": {
            "description": "Success get all todolist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayTodolist"
                },

Security
OpenAPI mendukung dokumentasi untuk Security RESTful API
Dengan ini kita bisa memberitahu pengguna mekanisme Security apa yang kita gunakan di RESTful API kita
Ada banyak format security yang didukung oleh OpenAPI, seperti apiKey (query param, header, cookie), http (basic auth, bearer token), oauth2 dan openIdConnect
Sebelum menggunakan fitur Security, kita perlu membuat requirement Security terlebih dahulu di Component, baru kita bisa gunakan di Operation

Security Object (1)

Security Object (1)

Kode : Security
components": {
    "securitySchemes": {
      "TodolistAuth": {
        "description": "Authentication for Todolist RESTful API",
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    },

Kode : Security di Operation
"paths": {
    "/todolist": {
      "get": {
        "security": [
          {
            "TodolistAuth": []
          }
        ],
        "tags": [
          "Todolist"
        ],

Code Generator
OpenAPI adalah spesifikasi yang standard, dan banyak diadopsi oleh banyak perusahaan
Bahkan kita bisa melakukan code generator sesuai dengan bahasa pemrograman yang kita inginkan
Contohnya kita bisa menggunakan https://editor.swagger.io/ untuk membuat code client atau server sesuai dengan OpenAPI file yang kita buat
Hal ini bisa mempermudah ketika kita butuh membuat kode client atau server yang sesuai dengan OpenAPI spec yang sudah dibuat

Swagger Code Generator

Penutup
Masih banyak fitur yang terdapat di OpenAPI, silahkan pelajari langsung di halaman websitenya
Mulai sekarang selalu gunakan OpenAPI untuk membuat dokumentasi RESTful API
Buatlah OpenAPI sebelum kita membuat aplikasi RESTful API
OpenAPI bisa digunakan sebagai kontrak kesepakatan antara yang akan membuat RESTful API dan yang akan menggunakan RESTful API
